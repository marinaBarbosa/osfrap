## 1 ##

''' Get the user’s first and last name with two raw_input calls and outputs them in reverse order 
with a comma between them '''

firstname = raw_input("What is your firstname? ")
lastname = raw_input("What is your lastname? ")

print lastname + ", " + firstname

## 2 ##

#Get the user's full name with one raw_input call and display the name as last, first

name = raw_input("What is your name? ")

tmp = name.split(" ")
tmp.reverse()

print ", ".join(tmp)

## 3 ##

''' Gets the coordinates for two points from the user and computes the distance.  Round your answer to
two decimal places. '''

p1x = input ("Give the coordinate off point1 in x")
p1y = input ("Give the coordinate off point1 in y")

p2x = input ("Give the coordinate off point2 in x")
p2y = input ("Give the coordinate off point2 in y")

dist = (((p2x - p1x)**2) + ((p2y - p1y)**2))**(0.5)

print "%.2f" % dist

## 4 ## 

from __future__ import division
import math


''' At Jenny’s birthday party she orders a 32 piece pizza.  Have the user (probably Jenny) enter the
number of people at the party that will be eating pizza and output the number of slices each one gets.
As you know the pizza might not divide evenly.  There are two ways to handle this. The first is to
ignore the extra pieces and give everyone the same amount.  The second way is to cut up the extra
pieces so that everyone gets the same amount.  Your program must output both options. E.g.
Number of guests: 10
Option 1: 3 slices each, 2 left over
Option 2: 3.2 slices each '''

numberofpizzas = input ("Number of pizzas ")
numberofguests = input ("Number of guests ")
print '####################################'

valueint = numberofpizzas / numberofguests
valuefloat = numberofpizzas % numberofguests

print 'Option 1:', int(valueint), 'slices each,' , valuefloat , 'left over'
print 'Option 2: %.1f' %valueint, 'slices each '
                               

## 5 ## 

#Get a sentence from the user and display it back with one word per line

sentence = raw_input ("Write a sentence: ")

tmp = sentence.split()

for tmp in tmp:
    print(tmp)

## 6 ## 

'''When building and enclosure for a python the amount of area at the base of the enclosure should be
proportionate to the length of the snake. The minimum needed is 1/2 square foot for each foot in
length up to and including 6 and 3/4 square foot for each foot after that.
e.g. 9' python needs 5.25 square feet (6 * ½ + 3 * ¾)
Create a program that asks the user how long their python is and tell them the minimum area they
need for the base of its enclosure.
'''

python = input('Write the size of python: ')
minarea = 0.0

#The minimum needed is 1/2 square foot for each foot in length up to and including 6
if python <= 6:
    minarea = float(python)*1/2
#3/4 square foot for each foot after that
else:
    minarea = (float(python) - 6)*3/4
    minarea = 3 + minarea
    
print minarea

## 7 ##

''' Palindromes are words that are the same forwards and backwards.  Create a program that gets a
word from the user and tells them if it is palindrome or not.  Your program should not care about
capitalization. '''

palindrome = raw_input ("Please write a word")

if palindrome == palindrome[::-1]:
    print 'True'
else:
    print 'False'
    
## 8 ##

''' As you might know, the persistence of a number is the number of steps it takes to get a one-digit
number when separating the digits and multiplying them together.  What you may not have noticed
is that persistence is inherently recursive.  The persistence of any one-digit number is zero. The
persistence of any other number is one plus the persistence of the digits multiplied together. Create a
recursive function called persistence that computes the persistence of any whole number. '''

import operator

def persistence (x, count=0):

   while x >= 10 :
      digits = list(map(int, str(x)))
      num = reduce(operator.mul,digits)
      return persistence(num,count+1)
   if x < 10:
      return count   
   
print persistence(39)
