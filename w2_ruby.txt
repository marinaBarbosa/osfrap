#Exercise7

=begin
Make an OrangeTree class. It should have a height method which returns its height, and a
oneYearPasses method, which, when called, ages the tree one year. Each year the tree grows
taller (maximum height is 10m), and after 50 years the tree should die. For the first few years, it
should not produce fruit, but after a while it should, and older trees produce more each year than
younger trees. And, of course, you should be able to countTheOranges (which returns the
number of oranges on the tree), and pickAnOrange (which reduces the @orangeCount by one
and returns a string telling you how delicious the orange was, or else it just tells you that there are no
more oranges to pick this year). Make sure that any oranges you don't pick one year fall off before
the next year. Your program should behaves like this:
=end


class OrangeTree
  def initialize
    @age = 0
    @oranges = 0
    @height = 0
    puts "creates 0 years old tree"
  end
   
  def height
    if @height < 10
      @height += 0.5 * @age
    end
  end
   
  def oneYearPasses
    @age += 1
    height()
    if @age >= 50
      puts "Orange tree - the tree is died"
      exit
    elsif @age >= 3
      produceOranges
    end
  end
 

  def countTheOranges
   if(@orages==0) 
     puts "there are no more oranges to pick this year"
     else puts "there are #{@oranges} oranges on the tree"
     end
  end
 
  def pickAnOrange
    if @oranges >= 1
      @oranges -= 1
      puts "orange is delicious"
    else
      puts "there are no more oranges to pick this year"
    end
  end
 
  def produceOranges
    @oranges = 5 * (@age-3)
  end
   
end
 
orange_tree = OrangeTree.new #creates 0 years old tree
orange_tree.oneYearPasses
puts orange_tree #produces “Orange tree – age: 1 year, hight: 0.5 m”
orange_tree.pickAnOrange #produces “there are no more oranges to pick this year”
7.times {orange_tree.oneYearPasses}
orange_tree.pickAnOrange #produces “orange is delicious”
orange_tree.countTheOranges #produces “there are 24 oranges on the tree”
orange_tree.pickAnOrange #produces “orange is delicious”
orange_tree.countTheOranges #produces “there are 23 oranges on the tree”
55.times {orange_tree.oneYearPasses}
puts orange_tree #produces “Orange tree - the tree is died”

#Exercise8

=begin
Write in the class Range method todown behaves like this (use block_given? and yield
functions):

(3..5).todown {|i| print “hi#{i} ”} #produces hi5 hi4 hi3
(2...7).todown #produces 65432

=end


class Range
  def todown
    a= self.to_a.reverse
    b=a.length-1
    if block_given?
      for i in 0..b do
      yield
      puts a[i]
      end
      puts
    else
      for i in 0..a.length do
      puts a[i]
      end
   end
  end
end
 
(3..5).todown {|i| print "hi#{i} "}
(2...7).todown